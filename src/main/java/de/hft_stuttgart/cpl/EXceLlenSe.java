/* EXceLlenSe.java */
/* Generated By:JavaCC: Do not edit this line. EXceLlenSe.java */
package de.hft_stuttgart.cpl;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.StringReader;
import java.util.HashMap;
import java.time.Duration;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Arrays;
import java.util.Map;
import java.lang.String;
import java.util.List;
import java.util.ArrayList;
public class EXceLlenSe implements EXceLlenSeConstants {
    private static Map<String, String> cellReferenceValues;
    private static CurrentLoop currentLoop = null;
    private static Boolean assignmentForLoopStarted = false;

    private class CurrentLoop{
        public int loopStart;
        public int loopEnd;
    }

    private static String convertToString(double value) {
        if (value == (long) value) {
            return String.format("%d", (long) value);
        } else {
            return String.format("%s", value);
        }
    }

    private static String convertToString(boolean value) {
        if (value) {
            return "TRUE";
        } else {
            return "FALSE";
        }
    }

    public static void main(String args[]) throws ParseException, IOException
    {
            try {
                cellReferenceValues = new HashMap<>();
                EXceLlenSe parser = new EXceLlenSe(System.in);
                parser.program();
                System.out.println("Parsing successful!");
                System.out.println("Dump Variables: ");
                for (String key : cellReferenceValues.keySet()) {
                    System.out.println(key + " = " + cellReferenceValues.get(key));
                }
            } catch (ParseException e) {
                System.out.println("Parsing error: " + e.getMessage());
            }
    }

  final public void program() throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case FOR:
      case 28:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      statement();
    }
    jj_consume_token(FINISH);
}

  final public void statement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 28:{
      assignment();
      break;
      }
    case FOR:{
      forLoop();
      break;
      }
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public List<String> cellReference() throws ParseException {List<String> exprColumn = new ArrayList<String>();
            List<String> exprRow = new ArrayList<String>();
            List<String> res = new ArrayList<String>();
    jj_consume_token(28);
    exprColumn = numberExpression();
    jj_consume_token(29);
    exprRow = numberExpression();
if(currentLoop != null && exprColumn.size() != 1 && exprRow.size() != 1)
                 {
                     if(exprColumn.size() == 1)
                     {
                         for (int i = 0; i < exprRow.size(); i++)
                           {
                               String resultCell = "C" + exprColumn.get(0) + "R" + exprRow.get(i);
                               res.add(resultCell);
                           }
                     }
                      else if(exprRow.size() == 1)
                      {
                          for (int i = 0; i < exprColumn.size(); i++)
                             {
                                 String resultCell = "C" + exprColumn.get(i) + "R" + exprRow.get(0);
                                 res.add(resultCell);
                             }
                      }
                      else
                      {
                          for (int i = 0; i < exprColumn.size(); i++)
                          {
                              String resultCell = "C" + exprColumn.get(i) + "R" + exprRow.get(i);
                              res.add(resultCell);
                          }
                      }

                 }
                 else
                 {
                     res.add("C" + exprColumn.get(0) + "R" + exprRow.get(0));
                 }

                 {if ("" != null) return res;}
    throw new Error("Missing return statement in function");
}

  final public void assignment() throws ParseException {List<String> references;
            List<String> expressionValues;
    references = cellReference();
    jj_consume_token(EQ);
    expressionValues = expression();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case FORMATTED:{
      jj_consume_token(FORMATTED);
      stringExpression();
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      ;
    }
for (int i = 0; i < references.size(); i++)
                    cellReferenceValues.put(references.get(i), expressionValues.get(i));
}

  final public void forLoop() throws ParseException {
currentLoop = new CurrentLoop();
                assignmentForLoopStarted = false;
    jj_consume_token(FOR);
    jj_consume_token(VARIABLE);
    jj_consume_token(FROM);
currentLoop.loopStart = Integer.parseInt(expression().get(0));
    jj_consume_token(TO);
currentLoop.loopEnd = Integer.parseInt(expression().get(0));
    jj_consume_token(DO);
assignmentForLoopStarted = true;
                assignment();
    jj_consume_token(END);
currentLoop = null;
}

  final public List<String> expression() throws ParseException {String output = "";
            List<String> outputList = new ArrayList<String>();
    if (jj_2_1(12)) {
      output = booleanExpression();
outputList.add(output);
                    {if ("" != null) return outputList;}
    } else if (jj_2_2(6)) {
      outputList = numberExpression();
{if ("" != null) return outputList;}
    } else if (jj_2_3(6)) {
      outputList = timestampExpression();
{if ("" != null) return outputList;}
    } else if (jj_2_4(12)) {
      outputList = stringExpression();
{if ("" != null) return outputList;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final public List<String> numberExpression() throws ParseException {List<String> firstTerm = new ArrayList<String>();
         List<String> secondTerm = new ArrayList<String>();
         List<String> res = new ArrayList<String>();
         String funcCallRes = "";
         String op = "";
         String timeStamp1 = "";
         String timeStamp2 = "";
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DECIMAL_LITERAL:
    case FLOAT_LITERAL_1:
    case FLOAT_LITERAL_2:
    case FLOAT_LITERAL_3:
    case VARIABLE:{
      firstTerm = term();
for (int i = 0; i < firstTerm.size(); i++)
                {
                    res.add(firstTerm.get(i));
                }
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ADD:
        case SUB:{
          ;
          break;
          }
        default:
          jj_la1[3] = jj_gen;
          break label_2;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ADD:{
          op = jj_consume_token(ADD).image;
          secondTerm = term();
for (int i = 0; i < res.size(); i++){
                        Double firstTermFromRes = Double.parseDouble(res.get(i));
                        Double secondTermDouble = Double.parseDouble(secondTerm.get(i));
                        String calcRes = convertToString(firstTermFromRes + secondTermDouble);
                        res.set(i, calcRes);
                    }
          break;
          }
        case SUB:{
          op = jj_consume_token(SUB).image;
          secondTerm = term();
for (int i = 0; i < res.size(); i++){
                        Double firstTermFromRes = Double.parseDouble(res.get(i));
                        Double secondTermDouble = Double.parseDouble(secondTerm.get(i));
                        String calcRes = convertToString(firstTermFromRes - secondTermDouble);
                        res.set(i, calcRes);
                    }
          break;
          }
        default:
          jj_la1[4] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
{if ("" != null) return res;}
      break;
      }
    case FUNCTION:{
      funcCallRes = functionCall();
res.add(funcCallRes);
                {if ("" != null) return res;}
      break;
      }
    case TIMESTAMP_LITERAL:{
      timeStamp1 = jj_consume_token(TIMESTAMP_LITERAL).image;
      jj_consume_token(SUB);
      timeStamp2 = jj_consume_token(TIMESTAMP_LITERAL).image;
DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
                timeStamp1 = timeStamp1.replace("{", "");
                timeStamp1 = timeStamp1.replace("}", "");
                timeStamp2 = timeStamp2.replace("{", "");
                timeStamp2 = timeStamp2.replace("}", "");
                LocalDateTime dateTime1 = LocalDateTime.parse(timeStamp1, formatter);
                LocalDateTime dateTime2 = LocalDateTime.parse(timeStamp2, formatter);
                Duration duration = Duration.between(dateTime1, dateTime2);
                res.add(Long.toString(duration.getSeconds() * -1));
                {if ("" != null) return res;}
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final public String booleanExpression() throws ParseException {List<String> firstTermList;
                 List<String> secondTermList;
                String firstTerm = "";
                String secondTerm = "";
                String op = "";
                String res = "";
                String timeStamp1 = "";
                String timeStamp2 = "";
    if (jj_2_5(3)) {
      firstTermList = numberExpression();
      op = jj_consume_token(COMP_OP).image;
      secondTermList = numberExpression();
firstTerm = firstTermList.get(0);
                    secondTerm = secondTermList.get(0);
                    Double firstTermDouble = Double.parseDouble(firstTerm);
                    Double secondTermDouble = Double.parseDouble(secondTerm);
                    switch (op) {
                        case "<":
                            res = convertToString(firstTermDouble < secondTermDouble);
                            break;
                        case "<=":
                            res = convertToString(firstTermDouble <= secondTermDouble);
                            break;
                        case "=":
                            res = convertToString(firstTermDouble.equals(secondTermDouble));
                            break;
                        case ">=":
                            res = convertToString(firstTermDouble >= secondTermDouble);
                            break;
                        case ">":
                            res = convertToString(firstTermDouble > secondTermDouble);
                            break;
                        case "<>":
                            res = convertToString(!firstTermDouble.equals(secondTermDouble));
                            break;
                    }
                    {if ("" != null) return res;}
    } else if (jj_2_6(3)) {
      timeStamp1 = jj_consume_token(TIMESTAMP_LITERAL).image;
      op = jj_consume_token(COMP_OP).image;
      timeStamp2 = jj_consume_token(TIMESTAMP_LITERAL).image;
DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
                    timeStamp1 = timeStamp1.replace("{", "");
                    timeStamp1 = timeStamp1.replace("}", "");
                    timeStamp2 = timeStamp2.replace("{", "");
                    timeStamp2 = timeStamp2.replace("}", "");
                    LocalDateTime dateTime1 = LocalDateTime.parse(timeStamp1, formatter);
                    LocalDateTime dateTime2 = LocalDateTime.parse(timeStamp2, formatter);
                    switch (op) {
                        case "<":
                            res = convertToString(dateTime1.isBefore(dateTime2));
                            break;
                        case "<=":
                            res = convertToString(dateTime1.isBefore(dateTime2) || dateTime1.isEqual(dateTime2));
                            break;
                        case "=":
                            res = convertToString(dateTime1.isEqual(dateTime2));
                            break;
                        case ">=":
                            res = convertToString(dateTime1.isAfter(dateTime2) || dateTime1.isEqual(dateTime2));
                            break;
                        case ">":
                            res = convertToString(dateTime1.isAfter(dateTime2));
                            break;
                        case "<>":
                            res = convertToString(!dateTime1.isEqual(dateTime2));
                            break;
                    }
                    {if ("" != null) return res;}
    } else if (jj_2_7(3)) {
      firstTermList = stringExpression();
      op = jj_consume_token(COMP_OP).image;
      secondTermList = stringExpression();
firstTerm = firstTermList.get(0);
                    secondTerm = secondTermList.get(0);
                    switch (op) {
                        case "<":
                            res = convertToString(firstTerm.compareTo(secondTerm) < 0);
                            break;
                        case "<=":
                            res = convertToString(firstTerm.compareTo(secondTerm) <= 0);
                            break;
                        case "=":
                            res = convertToString(firstTerm.compareTo(secondTerm) == 0);
                            break;
                        case ">=":
                            res = convertToString(firstTerm.compareTo(secondTerm) >= 0);
                            break;
                        case ">":
                            res = convertToString(firstTerm.compareTo(secondTerm) > 0);
                            break;
                        case "<>":
                            res = convertToString(firstTerm.compareTo(secondTerm) != 0);
                            break;
                    }
                    {if ("" != null) return res;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final public List<String> term() throws ParseException {List<String> firstFactor = new ArrayList<String>();
           List<String> secondFactor = new ArrayList<String>();
           String op = "";
    firstFactor = factor();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MOD:
      case DIV:
      case MUL:{
        ;
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        break label_3;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MUL:{
        op = jj_consume_token(MUL).image;
        secondFactor = factor();
Double firstFactorDouble = 0.0;
                      Double secondFactorDouble = 0.0;
                      if(secondFactor.size() == 1)
                      {
                          secondFactorDouble = Double.valueOf(secondFactor.get(0));
                          for (int i = 0; i < firstFactor.size(); i++)
                          {
                              firstFactorDouble = Double.valueOf(firstFactor.get(i));
                              firstFactor.set(i, convertToString(firstFactorDouble * secondFactorDouble));
                          }
                      }
                      else
                      {
                          for (int i = 0; i < firstFactor.size(); i++)
                            {
                                firstFactorDouble = Double.valueOf(firstFactor.get(i));
                                secondFactorDouble = Double.valueOf(secondFactor.get(i));
                                firstFactor.set(i, convertToString(firstFactorDouble * secondFactorDouble));
                            }
                      }
        break;
        }
      case DIV:{
        op = jj_consume_token(DIV).image;
        secondFactor = factor();
Double firstFactorDouble = 0.0;
                 Double secondFactorDouble = 0.0;
                 if(secondFactor.size() == 1)
                 {
                     secondFactorDouble = Double.valueOf(secondFactor.get(0));
                     for (int i = 0; i < firstFactor.size(); i++)
                     {
                         firstFactorDouble = Double.valueOf(firstFactor.get(i));
                         firstFactor.set(i, convertToString(firstFactorDouble / secondFactorDouble));
                     }
                 }
                 else
                 {
                     for (int i = 0; i < firstFactor.size(); i++)
                       {
                           firstFactorDouble = Double.valueOf(firstFactor.get(i));
                           secondFactorDouble = Double.valueOf(secondFactor.get(i));
                           firstFactor.set(i, convertToString(firstFactorDouble / secondFactorDouble));
                       }
                 }
        break;
        }
      case MOD:{
        op = jj_consume_token(MOD).image;
        secondFactor = factor();
Double firstFactorDouble = 0.0;
                Double secondFactorDouble = 0.0;
                if(secondFactor.size() == 1)
                {
                    secondFactorDouble = Double.valueOf(secondFactor.get(0));
                    for (int i = 0; i < firstFactor.size(); i++)
                    {
                        firstFactorDouble = Double.valueOf(firstFactor.get(i));
                        firstFactor.set(i, convertToString(firstFactorDouble % secondFactorDouble));
                    }
                }
                else
                {
                    for (int i = 0; i < firstFactor.size(); i++)
                      {
                          firstFactorDouble = Double.valueOf(firstFactor.get(i));
                          secondFactorDouble = Double.valueOf(secondFactor.get(i));
                          firstFactor.set(i, convertToString(firstFactorDouble % secondFactorDouble));
                      }
                }
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return firstFactor;}
    throw new Error("Missing return statement in function");
}

  final public List<String> factor() throws ParseException {List<String> res = new ArrayList<>();
          String literal = "";
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DECIMAL_LITERAL:{
      literal = jj_consume_token(DECIMAL_LITERAL).image;
if(currentLoop != null){
                    if(!assignmentForLoopStarted && currentLoop != null)
                        res.add(literal);
                    for (int i = currentLoop.loopStart; i <= currentLoop.loopEnd; i++)
                    {
                        res.add(literal);
                    }
                }
                else
                {
                    res.add(literal);
                }
                {if ("" != null) return res;}
      break;
      }
    case FLOAT_LITERAL_1:{
      literal = jj_consume_token(FLOAT_LITERAL_1).image;
if(!assignmentForLoopStarted && currentLoop != null)
                        res.add(literal);
                if(currentLoop != null){
                    for (int i = currentLoop.loopStart; i <= currentLoop.loopEnd; i++)
                    {
                        res.add(literal);
                    }
                }
                else
                {
                    res.add(literal);
                }
                {if ("" != null) return res;}
      break;
      }
    case FLOAT_LITERAL_2:{
      literal = jj_consume_token(FLOAT_LITERAL_2).image;
if(!assignmentForLoopStarted && currentLoop != null)
                        res.add(literal);
                if(currentLoop != null){
                    for (int i = currentLoop.loopStart; i <= currentLoop.loopEnd; i++)
                    {
                        res.add(literal);
                    }
                }
                else
                {
                    res.add(literal);
                }
                {if ("" != null) return res;}
      break;
      }
    case FLOAT_LITERAL_3:{
      literal = jj_consume_token(FLOAT_LITERAL_3).image;
if(!assignmentForLoopStarted && currentLoop != null)
                        res.add(literal);
                if(currentLoop != null){
                    for (int i = currentLoop.loopStart; i <= currentLoop.loopEnd; i++)
                    {
                        res.add(literal);
                    }
                }
                else
                {
                    res.add(literal);
                }
                {if ("" != null) return res;}
      break;
      }
    case VARIABLE:{
      literal = jj_consume_token(VARIABLE).image;
if(!assignmentForLoopStarted && currentLoop != null)
                        res.add(literal);
                if(currentLoop != null){
                    Integer toAdd = currentLoop.loopStart;
                    for (int i = currentLoop.loopStart; i <= currentLoop.loopEnd; i++)
                    {
                        res.add(String.valueOf(toAdd++));
                    }
                }
                else
                {
                    res.add(literal);
                }
                {if ("" != null) return res;}
      break;
      }
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final public String argsList() throws ParseException {int count = 1;
    jj_consume_token(DECIMAL_LITERAL);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 30:{
        ;
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        break label_4;
      }
      jj_consume_token(30);
      jj_consume_token(DECIMAL_LITERAL);
count++;
    }
{if ("" != null) return Integer.toString(count);}
    throw new Error("Missing return statement in function");
}

  final public String functionCall() throws ParseException {String res = "";
    jj_consume_token(FUNCTION);
    jj_consume_token(31);
    res = argsList();
    jj_consume_token(32);
{if ("" != null) return res;}
    throw new Error("Missing return statement in function");
}

  final public List<String> timestampExpression() throws ParseException {String timestamp = "";
         String op = "";
         List<String> numberList;
         String number = "";
    if (jj_2_8(3)) {
      timestamp = jj_consume_token(TIMESTAMP_LITERAL).image;
      op = jj_consume_token(ADD).image;
      numberList = numberExpression();
timestamp = timestamp.replace("{", "");
                timestamp = timestamp.replace("}", "");
                DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
                for (int i = 0; i < numberList.size(); i++ )
                {
                    number = numberList.get(i);
                    LocalDateTime dateTime = LocalDateTime.parse(timestamp, formatter);
                    dateTime = dateTime.plusSeconds(Long.parseLong(number));
                    numberList.set(i, dateTime.toString());
                }
                {if ("" != null) return numberList;}
    } else if (jj_2_9(3)) {
      timestamp = jj_consume_token(TIMESTAMP_LITERAL).image;
      op = jj_consume_token(SUB).image;
      numberList = numberExpression();
timestamp = timestamp.replace("{", "");
                timestamp = timestamp.replace("}", "");
                DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
                for (int i = 0; i < numberList.size(); i++ )
                {
                    number = numberList.get(i);
                    LocalDateTime dateTime = LocalDateTime.parse(timestamp, formatter);
                    dateTime = dateTime.minusSeconds(Long.parseLong(number));
                    numberList.set(i, dateTime.toString());
                }
                {if ("" != null) return numberList;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final public List<String> stringExpression() throws ParseException {String currentLiteral = "";
            String ampresandSign = "";
            String concatLiteral = "";
            List<String> cellRefList;
            List<String> stringExprList = new ArrayList<String>();
            List<String> cellRefValueList = new ArrayList<String>();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case STRING_LITERAL:{
      currentLiteral = jj_consume_token(STRING_LITERAL).image;
cellRefValueList.add(currentLiteral);
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case CONCAT:{
          ;
          break;
          }
        default:
          jj_la1[10] = jj_gen;
          break label_5;
        }
        ampresandSign = jj_consume_token(CONCAT).image;
        concatLiteral = jj_consume_token(STRING_LITERAL).image;
currentLiteral = currentLiteral.replace("\'", "");
                concatLiteral = concatLiteral.replace("\'", "");
                currentLiteral = currentLiteral + " " + concatLiteral;
      }
currentLiteral = currentLiteral.replace("\'", "");
                if(currentLoop != null)
                {
                    for (int i = currentLoop.loopStart; i <= currentLoop.loopEnd; i++)
                        cellRefValueList.add(currentLiteral);
                }
                else
                {
                    cellRefValueList.set(0, currentLiteral);
                }
                {if ("" != null) return cellRefValueList;}
      break;
      }
    case 28:{
      cellRefList = cellReference();
      concatLiteral = jj_consume_token(CONCAT).image;
      stringExprList = stringExpression();
for (int i = 0; i < cellRefList.size(); i++)
                {
                    String cellRef = cellRefList.get(i);
                    String cellRefValue = cellReferenceValues.get(cellRef);
                    cellRefValue = cellRefValue + " " + stringExprList.get(i);
                    cellRefValue = cellRefValue.replace("\'", "");
                    cellRefValueList.add(i, cellRefValue);
                }
                {if ("" != null) return cellRefValueList;}
      break;
      }
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_1()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_2()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_3()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_4()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_5()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_6()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_7()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_8()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_9()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_3_7()
 {
    if (jj_3R_stringExpression_655_13_9()) return true;
    if (jj_scan_token(COMP_OP)) return true;
    if (jj_3R_stringExpression_655_13_9()) return true;
    return false;
  }

  private boolean jj_3R_factor_556_13_29()
 {
    if (jj_scan_token(VARIABLE)) return true;
    return false;
  }

  private boolean jj_3R_numberExpression_268_15_12()
 {
    if (jj_scan_token(TIMESTAMP_LITERAL)) return true;
    if (jj_scan_token(SUB)) return true;
    if (jj_scan_token(TIMESTAMP_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_numberExpression_262_17_11()
 {
    if (jj_3R_functionCall_594_13_17()) return true;
    return false;
  }

  private boolean jj_3R_term_451_16_32()
 {
    if (jj_scan_token(MOD)) return true;
    if (jj_3R_factor_488_13_20()) return true;
    return false;
  }

  private boolean jj_3R_factor_539_13_28()
 {
    if (jj_scan_token(FLOAT_LITERAL_3)) return true;
    return false;
  }

  private boolean jj_3_9()
 {
    if (jj_scan_token(TIMESTAMP_LITERAL)) return true;
    if (jj_scan_token(SUB)) return true;
    if (jj_3R_numberExpression_229_13_7()) return true;
    return false;
  }

  private boolean jj_3R_numberExpression_248_13_23()
 {
    if (jj_scan_token(SUB)) return true;
    if (jj_3R_term_399_12_15()) return true;
    return false;
  }

  private boolean jj_3R_term_426_16_31()
 {
    if (jj_scan_token(DIV)) return true;
    if (jj_3R_factor_488_13_20()) return true;
    return false;
  }

  private boolean jj_3R_numberExpression_237_13_16()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_numberExpression_237_13_22()) {
    jj_scanpos = xsp;
    if (jj_3R_numberExpression_248_13_23()) return true;
    }
    return false;
  }

  private boolean jj_3R_numberExpression_237_13_22()
 {
    if (jj_scan_token(ADD)) return true;
    if (jj_3R_term_399_12_15()) return true;
    return false;
  }

  private boolean jj_3_6()
 {
    if (jj_scan_token(TIMESTAMP_LITERAL)) return true;
    if (jj_scan_token(COMP_OP)) return true;
    if (jj_scan_token(TIMESTAMP_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_factor_522_13_27()
 {
    if (jj_scan_token(FLOAT_LITERAL_2)) return true;
    return false;
  }

  private boolean jj_3R_timestampExpression_610_13_8()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3_9()) return true;
    }
    return false;
  }

  private boolean jj_3_8()
 {
    if (jj_scan_token(TIMESTAMP_LITERAL)) return true;
    if (jj_scan_token(ADD)) return true;
    if (jj_3R_numberExpression_229_13_7()) return true;
    return false;
  }

  private boolean jj_3R_numberExpression_229_13_10()
 {
    if (jj_3R_term_399_12_15()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_numberExpression_237_13_16()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_numberExpression_229_13_7()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_numberExpression_229_13_10()) {
    jj_scanpos = xsp;
    if (jj_3R_numberExpression_262_17_11()) {
    jj_scanpos = xsp;
    if (jj_3R_numberExpression_268_15_12()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_factor_505_13_26()
 {
    if (jj_scan_token(FLOAT_LITERAL_1)) return true;
    return false;
  }

  private boolean jj_3_4()
 {
    if (jj_3R_stringExpression_655_13_9()) return true;
    return false;
  }

  private boolean jj_3R_term_401_16_21()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_term_401_16_30()) {
    jj_scanpos = xsp;
    if (jj_3R_term_426_16_31()) {
    jj_scanpos = xsp;
    if (jj_3R_term_451_16_32()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_term_401_16_30()
 {
    if (jj_scan_token(MUL)) return true;
    if (jj_3R_factor_488_13_20()) return true;
    return false;
  }

  private boolean jj_3R_functionCall_594_13_17()
 {
    if (jj_scan_token(FUNCTION)) return true;
    if (jj_scan_token(31)) return true;
    if (jj_3R_argsList_579_13_24()) return true;
    if (jj_scan_token(32)) return true;
    return false;
  }

  private boolean jj_3_3()
 {
    if (jj_3R_timestampExpression_610_13_8()) return true;
    return false;
  }

  private boolean jj_3R_cellReference_114_13_19()
 {
    if (jj_scan_token(28)) return true;
    if (jj_3R_numberExpression_229_13_7()) return true;
    if (jj_scan_token(29)) return true;
    if (jj_3R_numberExpression_229_13_7()) return true;
    return false;
  }

  private boolean jj_3R_term_399_12_15()
 {
    if (jj_3R_factor_488_13_20()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_term_401_16_21()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_stringExpression_682_13_14()
 {
    if (jj_3R_cellReference_114_13_19()) return true;
    if (jj_scan_token(CONCAT)) return true;
    if (jj_3R_stringExpression_655_13_9()) return true;
    return false;
  }

  private boolean jj_3_2()
 {
    if (jj_3R_numberExpression_229_13_7()) return true;
    return false;
  }

  private boolean jj_3R_booleanExpression_297_17_6()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3_7()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_5()
 {
    if (jj_3R_numberExpression_229_13_7()) return true;
    if (jj_scan_token(COMP_OP)) return true;
    if (jj_3R_numberExpression_229_13_7()) return true;
    return false;
  }

  private boolean jj_3R_argsList_581_17_33()
 {
    if (jj_scan_token(30)) return true;
    if (jj_scan_token(DECIMAL_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_factor_488_13_20()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_factor_488_13_25()) {
    jj_scanpos = xsp;
    if (jj_3R_factor_505_13_26()) {
    jj_scanpos = xsp;
    if (jj_3R_factor_522_13_27()) {
    jj_scanpos = xsp;
    if (jj_3R_factor_539_13_28()) {
    jj_scanpos = xsp;
    if (jj_3R_factor_556_13_29()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_factor_488_13_25()
 {
    if (jj_scan_token(DECIMAL_LITERAL)) return true;
    return false;
  }

  private boolean jj_3_1()
 {
    if (jj_3R_booleanExpression_297_17_6()) return true;
    return false;
  }

  private boolean jj_3R_argsList_579_13_24()
 {
    if (jj_scan_token(DECIMAL_LITERAL)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_argsList_581_17_33()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_stringExpression_660_15_18()
 {
    if (jj_scan_token(CONCAT)) return true;
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_stringExpression_655_13_13()
 {
    if (jj_scan_token(STRING_LITERAL)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_stringExpression_660_15_18()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_stringExpression_655_13_9()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_stringExpression_655_13_13()) {
    jj_scanpos = xsp;
    if (jj_3R_stringExpression_682_13_14()) return true;
    }
    return false;
  }

  /** Generated Token Manager. */
  public EXceLlenSeTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[12];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x10000080,0x10000080,0x40,0xc000,0xc000,0x3781000,0x70000,0x70000,0x2780000,0x40000000,0x2000,0x10800000,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
	}
  final private JJCalls[] jj_2_rtns = new JJCalls[9];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public EXceLlenSe(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public EXceLlenSe(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new EXceLlenSeTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 12; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 12; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public EXceLlenSe(java.io.Reader stream) {
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new EXceLlenSeTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 12; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new EXceLlenSeTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 12; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public EXceLlenSe(EXceLlenSeTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 12; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(EXceLlenSeTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 12; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   if (++jj_gc > 100) {
		 jj_gc = 0;
		 for (int i = 0; i < jj_2_rtns.length; i++) {
		   JJCalls c = jj_2_rtns[i];
		   while (c != null) {
			 if (c.gen < jj_gen) c.first = null;
			 c = c.next;
		   }
		 }
	   }
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error {
    @Override
    public Throwable fillInStackTrace() {
      return this;
    }
  }
  static private final LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
	 if (jj_scanpos == jj_lastpos) {
	   jj_la--;
	   if (jj_scanpos.next == null) {
		 jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
	   } else {
		 jj_lastpos = jj_scanpos = jj_scanpos.next;
	   }
	 } else {
	   jj_scanpos = jj_scanpos.next;
	 }
	 if (jj_rescan) {
	   int i = 0; Token tok = token;
	   while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
	   if (tok != null) jj_add_error_token(kind, i);
	 }
	 if (jj_scanpos.kind != kind) return true;
	 if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
	 return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
	 if (pos >= 100) {
		return;
	 }

	 if (pos == jj_endpos + 1) {
	   jj_lasttokens[jj_endpos++] = kind;
	 } else if (jj_endpos != 0) {
	   jj_expentry = new int[jj_endpos];

	   for (int i = 0; i < jj_endpos; i++) {
		 jj_expentry[i] = jj_lasttokens[i];
	   }

	   for (int[] oldentry : jj_expentries) {
		 if (oldentry.length == jj_expentry.length) {
		   boolean isMatched = true;

		   for (int i = 0; i < jj_expentry.length; i++) {
			 if (oldentry[i] != jj_expentry[i]) {
			   isMatched = false;
			   break;
			 }

		   }
		   if (isMatched) {
			 jj_expentries.add(jj_expentry);
			 break;
		   }
		 }
	   }

	   if (pos != 0) {
		 jj_lasttokens[(jj_endpos = pos) - 1] = kind;
	   }
	 }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[33];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 12; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 33; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 jj_endpos = 0;
	 jj_rescan_token();
	 jj_add_error_token(0, 0);
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
	 jj_rescan = true;
	 for (int i = 0; i < 9; i++) {
	   try {
		 JJCalls p = jj_2_rtns[i];

		 do {
		   if (p.gen > jj_gen) {
			 jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
			 switch (i) {
			   case 0: jj_3_1(); break;
			   case 1: jj_3_2(); break;
			   case 2: jj_3_3(); break;
			   case 3: jj_3_4(); break;
			   case 4: jj_3_5(); break;
			   case 5: jj_3_6(); break;
			   case 6: jj_3_7(); break;
			   case 7: jj_3_8(); break;
			   case 8: jj_3_9(); break;
			 }
		   }
		   p = p.next;
		 } while (p != null);

		 } catch(LookaheadSuccess ls) { }
	 }
	 jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
	 JJCalls p = jj_2_rtns[index];
	 while (p.gen > jj_gen) {
	   if (p.next == null) { p = p.next = new JJCalls(); break; }
	   p = p.next;
	 }

	 p.gen = jj_gen + xla - jj_la; 
	 p.first = token;
	 p.arg = xla;
  }

  static final class JJCalls {
	 int gen;
	 Token first;
	 int arg;
	 JJCalls next;
  }

}
