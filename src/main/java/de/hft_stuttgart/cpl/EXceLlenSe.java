/* EXceLlenSe.java */
/* Generated By:JavaCC: Do not edit this line. EXceLlenSe.java */
package de.hft_stuttgart.cpl;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.StringReader;
import java.util.HashMap;
import java.util.Map;
public class EXceLlenSe implements EXceLlenSeConstants {
    private static Map<String, String> cellReferenceValues;

    private static String convertToString(double value) {
        if (value == (long) value) {
            return String.format("%d", (long) value);
        } else {
            return String.format("%s", value);
        }
    }

    public static void main(String args[]) throws ParseException, IOException
    {
        String input = new BufferedReader(new InputStreamReader(System.in)).readLine();
        while (!input.equals("exit")) {
            try {
                cellReferenceValues = new HashMap<>();
                EXceLlenSe parser = new EXceLlenSe(new StringReader(input));
                parser.program();
                System.out.println("Parsing successful!");
                System.out.println("Dump Variables: ");
                for (String key : cellReferenceValues.keySet()) {
                    System.out.println(key + " = " + cellReferenceValues.get(key));
                }
            } catch (ParseException e) {
                System.out.println("Parsing error: " + e.getMessage());
            }
            input = new BufferedReader(new InputStreamReader(System.in)).readLine();
        }
    }

  final public void program() throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case FOR:
      case 26:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      statement();
    }
    jj_consume_token(0);
}

  final public void statement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 26:{
      assignment();
      break;
      }
    case FOR:{
      forLoop();
      break;
      }
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public String cellReference() throws ParseException {String exprColumn;
            String exprRow;
exprColumn = "";
                exprRow = "";
    jj_consume_token(26);
    exprColumn = numberExpression();
    jj_consume_token(27);
    exprRow = numberExpression();
{if ("" != null) return "C" + exprColumn + "R" + exprRow;}
    throw new Error("Missing return statement in function");
}

  final public void assignment() throws ParseException {String reference;
            String expression;
            Token equal_sign;
reference = "";
            expression = "";
    reference = cellReference();
    jj_consume_token(EQ);
    expression();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case FORMATTED:{
      jj_consume_token(FORMATTED);
      stringExpression();
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      ;
    }
cellReferenceValues.put(reference, "EXPRESSION HARDCODED");
}

  final public void forLoop() throws ParseException {
    jj_consume_token(FOR);
    jj_consume_token(VARIABLE);
    jj_consume_token(FROM);
    expression();
    jj_consume_token(TO);
    expression();
    jj_consume_token(DO);
    assignment();
    jj_consume_token(END);
}

  final public void expression() throws ParseException {
    if (jj_2_1(3)) {
      numberExpression();
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMP_OP:{
          ;
          break;
          }
        default:
          jj_la1[3] = jj_gen;
          break label_2;
        }
        jj_consume_token(COMP_OP);
        numberExpression();
      }
    } else if (jj_2_2(3)) {
      timestampExpression();
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMP_OP:{
          ;
          break;
          }
        default:
          jj_la1[4] = jj_gen;
          break label_3;
        }
        jj_consume_token(COMP_OP);
        timestampExpression();
      }
    } else if (jj_2_3(3)) {
      stringExpression();
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMP_OP:{
          ;
          break;
          }
        default:
          jj_la1[5] = jj_gen;
          break label_4;
        }
        jj_consume_token(COMP_OP);
        stringExpression();
      }
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public String numberExpression() throws ParseException {String firstTerm = "";
         String secondTerm = "";
         String op = "";
         String res = "";
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DECIMAL_LITERAL:
    case FLOAT_LITERAL_1:
    case FLOAT_LITERAL_2:
    case FLOAT_LITERAL_3:{
      firstTerm = term();
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ADD:
        case SUB:{
          ;
          break;
          }
        default:
          jj_la1[6] = jj_gen;
          break label_5;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ADD:{
          op = jj_consume_token(ADD).image;
          secondTerm = term();
Double firstTermDouble = Double.parseDouble(firstTerm);
                    Double secondTermDouble = Double.parseDouble(secondTerm);
                    firstTerm = convertToString(firstTermDouble + secondTermDouble);
          break;
          }
        case SUB:{
          op = jj_consume_token(SUB).image;
          secondTerm = term();
Double firstTermDouble = Double.parseDouble(firstTerm);
                    Double secondTermDouble = Double.parseDouble(secondTerm);
                    firstTerm = convertToString(firstTermDouble + secondTermDouble);
          break;
          }
        default:
          jj_la1[7] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
{if ("" != null) return firstTerm;}
      break;
      }
    case FUNCTION:{
      functionCall();
      break;
      }
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final public String term() throws ParseException {String firstFactor = "";
         String secondFactor = "";
         String op = "";
         String res = "";
    firstFactor = factor();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MOD:
      case DIV:
      case MUL:{
        ;
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        break label_6;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MUL:{
        op = jj_consume_token(MUL).image;
        secondFactor = factor();
Double firstFactorDouble = Double.parseDouble(firstFactor);
                Double secondFactorDouble = Double.parseDouble(secondFactor);
                firstFactor = convertToString(firstFactorDouble * secondFactorDouble);
        break;
        }
      case DIV:{
        op = jj_consume_token(DIV).image;
        secondFactor = factor();
Double firstFactorDouble = Double.parseDouble(firstFactor);
                Double secondFactorDouble = Double.parseDouble(secondFactor);
                firstFactor = convertToString(firstFactorDouble / secondFactorDouble);
        break;
        }
      case MOD:{
        op = jj_consume_token(MOD).image;
        secondFactor = factor();
Double firstFactorDouble = Double.parseDouble(firstFactor);
                Double secondFactorDouble = Double.parseDouble(secondFactor);
                firstFactor = convertToString(firstFactorDouble % secondFactorDouble);
        break;
        }
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return firstFactor;}
    throw new Error("Missing return statement in function");
}

  final public String factor() throws ParseException {String literal = "";
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DECIMAL_LITERAL:{
      literal = jj_consume_token(DECIMAL_LITERAL).image;
{if ("" != null) return literal;}
      break;
      }
    case FLOAT_LITERAL_1:{
      literal = jj_consume_token(FLOAT_LITERAL_1).image;
{if ("" != null) return literal;}
      break;
      }
    case FLOAT_LITERAL_2:{
      literal = jj_consume_token(FLOAT_LITERAL_2).image;
{if ("" != null) return literal;}
      break;
      }
    case FLOAT_LITERAL_3:{
      literal = jj_consume_token(FLOAT_LITERAL_3).image;
{if ("" != null) return literal;}
      break;
      }
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final public void functionCall() throws ParseException {
    jj_consume_token(FUNCTION);
    jj_consume_token(28);
    expression();
    jj_consume_token(29);
}

  final public void timestampExpression() throws ParseException {
    if (jj_2_4(3)) {
      jj_consume_token(TIMESTAMP_LITERAL);
      jj_consume_token(ADD);
      numberExpression();
    } else if (jj_2_5(3)) {
      jj_consume_token(TIMESTAMP_LITERAL);
      jj_consume_token(SUB);
      numberExpression();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void stringExpression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case STRING_LITERAL:{
      jj_consume_token(STRING_LITERAL);
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case CONCAT:{
          ;
          break;
          }
        default:
          jj_la1[12] = jj_gen;
          break label_7;
        }
        jj_consume_token(CONCAT);
        jj_consume_token(STRING_LITERAL);
      }
      break;
      }
    case 26:{
      cellReference();
      jj_consume_token(CONCAT);
      stringExpression();
      break;
      }
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_1()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_2()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_3()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_4()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_5()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_3R_stringExpression_247_32_20()
 {
    if (jj_scan_token(CONCAT)) return true;
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_factor_217_13_28()
 {
    if (jj_scan_token(FLOAT_LITERAL_1)) return true;
    return false;
  }

  private boolean jj_3R_numberExpression_166_17_14()
 {
    if (jj_3R_functionCall_237_13_19()) return true;
    return false;
  }

  private boolean jj_3R_expression_133_190_12()
 {
    if (jj_scan_token(COMP_OP)) return true;
    if (jj_3R_stringExpression_247_13_11()) return true;
    return false;
  }

  private boolean jj_3R_expression_133_48_9()
 {
    if (jj_scan_token(COMP_OP)) return true;
    if (jj_3R_numberExpression_145_13_8()) return true;
    return false;
  }

  private boolean jj_3R_factor_212_13_27()
 {
    if (jj_scan_token(DECIMAL_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_factor_212_13_22()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_factor_212_13_27()) {
    jj_scanpos = xsp;
    if (jj_3R_factor_217_13_28()) {
    jj_scanpos = xsp;
    if (jj_3R_factor_222_13_29()) {
    jj_scanpos = xsp;
    if (jj_3R_factor_227_13_30()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3_5()
 {
    if (jj_scan_token(TIMESTAMP_LITERAL)) return true;
    if (jj_scan_token(SUB)) return true;
    if (jj_3R_numberExpression_145_13_8()) return true;
    return false;
  }

  private boolean jj_3R_stringExpression_247_63_16()
 {
    if (jj_3R_cellReference_93_15_21()) return true;
    return false;
  }

  private boolean jj_3R_numberExpression_155_13_25()
 {
    if (jj_scan_token(SUB)) return true;
    if (jj_3R_term_177_13_17()) return true;
    return false;
  }

  private boolean jj_3_2()
 {
    if (jj_3R_timestampExpression_242_13_10()) return true;
    return false;
  }

  private boolean jj_3R_stringExpression_247_13_11()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_stringExpression_247_13_15()) {
    jj_scanpos = xsp;
    if (jj_3R_stringExpression_247_63_16()) return true;
    }
    return false;
  }

  private boolean jj_3R_stringExpression_247_13_15()
 {
    if (jj_scan_token(STRING_LITERAL)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_stringExpression_247_32_20()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_term_195_13_33()
 {
    if (jj_scan_token(MOD)) return true;
    if (jj_3R_factor_212_13_22()) return true;
    return false;
  }

  private boolean jj_3R_timestampExpression_242_13_10()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3_5()) return true;
    }
    return false;
  }

  private boolean jj_3_4()
 {
    if (jj_scan_token(TIMESTAMP_LITERAL)) return true;
    if (jj_scan_token(ADD)) return true;
    if (jj_3R_numberExpression_145_13_8()) return true;
    return false;
  }

  private boolean jj_3R_numberExpression_147_13_24()
 {
    if (jj_scan_token(ADD)) return true;
    if (jj_3R_term_177_13_17()) return true;
    return false;
  }

  private boolean jj_3R_numberExpression_147_13_18()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_numberExpression_147_13_24()) {
    jj_scanpos = xsp;
    if (jj_3R_numberExpression_155_13_25()) return true;
    }
    return false;
  }

  private boolean jj_3R_numberExpression_145_13_8()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_numberExpression_145_13_13()) {
    jj_scanpos = xsp;
    if (jj_3R_numberExpression_166_17_14()) return true;
    }
    return false;
  }

  private boolean jj_3R_numberExpression_145_13_13()
 {
    if (jj_3R_term_177_13_17()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_numberExpression_147_13_18()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_functionCall_237_13_19()
 {
    if (jj_scan_token(FUNCTION)) return true;
    if (jj_scan_token(28)) return true;
    if (jj_3R_expression_133_14_26()) return true;
    return false;
  }

  private boolean jj_3R_cellReference_93_15_21()
 {
    if (jj_scan_token(26)) return true;
    if (jj_3R_numberExpression_145_13_8()) return true;
    if (jj_scan_token(27)) return true;
    return false;
  }

  private boolean jj_3R_term_187_13_32()
 {
    if (jj_scan_token(DIV)) return true;
    if (jj_3R_factor_212_13_22()) return true;
    return false;
  }

  private boolean jj_3_3()
 {
    if (jj_3R_stringExpression_247_13_11()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_expression_133_190_12()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_expression_133_14_26()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_1()) {
    jj_scanpos = xsp;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3_3()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_1()
 {
    if (jj_3R_numberExpression_145_13_8()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_expression_133_48_9()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_factor_227_13_30()
 {
    if (jj_scan_token(FLOAT_LITERAL_3)) return true;
    return false;
  }

  private boolean jj_3R_term_179_13_31()
 {
    if (jj_scan_token(MUL)) return true;
    if (jj_3R_factor_212_13_22()) return true;
    return false;
  }

  private boolean jj_3R_term_179_13_23()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_term_179_13_31()) {
    jj_scanpos = xsp;
    if (jj_3R_term_187_13_32()) {
    jj_scanpos = xsp;
    if (jj_3R_term_195_13_33()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_term_177_13_17()
 {
    if (jj_3R_factor_212_13_22()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_term_179_13_23()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_factor_222_13_29()
 {
    if (jj_scan_token(FLOAT_LITERAL_2)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public EXceLlenSeTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[14];
  static private int[] jj_la1_0;
  static {
	   jj_la1_init_0();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x4000040,0x4000040,0x20,0x2000000,0x2000000,0x2000000,0x6000,0x6000,0x3c0800,0x38000,0x38000,0x3c0000,0x1000,0x4400000,};
	}
  final private JJCalls[] jj_2_rtns = new JJCalls[5];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public EXceLlenSe(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public EXceLlenSe(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new EXceLlenSeTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 14; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 14; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public EXceLlenSe(java.io.Reader stream) {
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new EXceLlenSeTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 14; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new EXceLlenSeTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 14; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public EXceLlenSe(EXceLlenSeTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 14; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(EXceLlenSeTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 14; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   if (++jj_gc > 100) {
		 jj_gc = 0;
		 for (int i = 0; i < jj_2_rtns.length; i++) {
		   JJCalls c = jj_2_rtns[i];
		   while (c != null) {
			 if (c.gen < jj_gen) c.first = null;
			 c = c.next;
		   }
		 }
	   }
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error {
    @Override
    public Throwable fillInStackTrace() {
      return this;
    }
  }
  static private final LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
	 if (jj_scanpos == jj_lastpos) {
	   jj_la--;
	   if (jj_scanpos.next == null) {
		 jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
	   } else {
		 jj_lastpos = jj_scanpos = jj_scanpos.next;
	   }
	 } else {
	   jj_scanpos = jj_scanpos.next;
	 }
	 if (jj_rescan) {
	   int i = 0; Token tok = token;
	   while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
	   if (tok != null) jj_add_error_token(kind, i);
	 }
	 if (jj_scanpos.kind != kind) return true;
	 if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
	 return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
	 if (pos >= 100) {
		return;
	 }

	 if (pos == jj_endpos + 1) {
	   jj_lasttokens[jj_endpos++] = kind;
	 } else if (jj_endpos != 0) {
	   jj_expentry = new int[jj_endpos];

	   for (int i = 0; i < jj_endpos; i++) {
		 jj_expentry[i] = jj_lasttokens[i];
	   }

	   for (int[] oldentry : jj_expentries) {
		 if (oldentry.length == jj_expentry.length) {
		   boolean isMatched = true;

		   for (int i = 0; i < jj_expentry.length; i++) {
			 if (oldentry[i] != jj_expentry[i]) {
			   isMatched = false;
			   break;
			 }

		   }
		   if (isMatched) {
			 jj_expentries.add(jj_expentry);
			 break;
		   }
		 }
	   }

	   if (pos != 0) {
		 jj_lasttokens[(jj_endpos = pos) - 1] = kind;
	   }
	 }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[30];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 14; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 30; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 jj_endpos = 0;
	 jj_rescan_token();
	 jj_add_error_token(0, 0);
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
	 jj_rescan = true;
	 for (int i = 0; i < 5; i++) {
	   try {
		 JJCalls p = jj_2_rtns[i];

		 do {
		   if (p.gen > jj_gen) {
			 jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
			 switch (i) {
			   case 0: jj_3_1(); break;
			   case 1: jj_3_2(); break;
			   case 2: jj_3_3(); break;
			   case 3: jj_3_4(); break;
			   case 4: jj_3_5(); break;
			 }
		   }
		   p = p.next;
		 } while (p != null);

		 } catch(LookaheadSuccess ls) { }
	 }
	 jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
	 JJCalls p = jj_2_rtns[index];
	 while (p.gen > jj_gen) {
	   if (p.next == null) { p = p.next = new JJCalls(); break; }
	   p = p.next;
	 }

	 p.gen = jj_gen + xla - jj_la; 
	 p.first = token;
	 p.arg = xla;
  }

  static final class JJCalls {
	 int gen;
	 Token first;
	 int arg;
	 JJCalls next;
  }

}
